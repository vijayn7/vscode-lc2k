{
  "scopeName": "source.lc2k",
  "name": "LC2K",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#label"
    },
    {
      "include": "#directive"
    },
    {
      "include": "#instruction"
    },
    {
      "include": "#number"
    },
    {
      "include": "#register"
    },
    {
      "include": "#string"
    },
    {
      "include": "#ident"
    }
  ],
  "repository": {
    "label": {
      "patterns": [
        {
          "name": "entity.name.label.definition.lc2k",
          "match": "^[ \\t]*([A-Za-z][A-Za-z0-9]{0,5})(?=\\s)"
        }
      ]
    },
    "directive": {
      "patterns": [
        {
          "name": "support.function.lc2k",
          "match": "(?i)(?<=\\s|^)(\\.fill)(?=\\s|$)"
        },
        {
          "name": "keyword.other.directive.region.lc2k", 
          "match": "(?i)(?<=\\s|^)(\\.region|\\.endregion)(?=\\s|$)"
        }
      ]
    },
    "instruction": {
      "patterns": [
        {
          "name": "support.function.builtin.lc2k",
          "match": "(?i)(?<=\\s|^)(add)(?=\\s|$)"
        },
        {
          "name": "keyword.operator.arithmetic.lc2k",
          "match": "(?i)(?<=\\s|^)(nor)(?=\\s|$)"
        },
        {
          "name": "entity.name.function.lc2k",
          "match": "(?i)(?<=\\s|^)(lw)(?=\\s|$)"
        },
        {
          "name": "variable.language.lc2k",
          "match": "(?i)(?<=\\s|^)(sw)(?=\\s|$)"
        },
        {
          "name": "keyword.control.conditional.lc2k",
          "match": "(?i)(?<=\\s|^)(beq)(?=\\s|$)"
        },
        {
          "name": "entity.name.tag.lc2k",
          "match": "(?i)(?<=\\s|^)(jalr)(?=\\s|$)"
        },
        {
          "name": "invalid.deprecated.lc2k",
          "match": "(?i)(?<=\\s|^)(halt)(?=\\s|$)"
        },
        {
          "name": "comment.block.documentation.lc2k",
          "match": "(?i)(?<=\\s|^)(noop)(?=\\s|$)"
        }
      ]
    },
    "register": {
      "patterns": [
        {
          "name": "variable.language.register.lc2k",
          "match": "(?<=\\s|^)([0-7])(?=\\s|$)"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.hex.lc2k",
          "match": "(?<=\\s|^)-?0x[0-9A-Fa-f]+(?=\\s|$)"
        },
        {
          "name": "constant.numeric.binary.lc2k",
          "match": "(?<=\\s|^)-?0b[01]+(?=\\s|$)"
        },
        {
          "name": "constant.numeric.decimal.lc2k",
          "match": "(?<=\\s|^)-?[0-9]+(?=\\s|$)"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "name": "string.quoted.double.lc2k",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.lc2k",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.lc2k",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.lc2k",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "ident": {
      "patterns": [
        {
          "name": "variable.other.symbol.reference.lc2k",
          "match": "(?<=\\s|^)[A-Za-z][A-Za-z0-9]{0,5}(?=\\s|$)"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.number-sign.lc2k",
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.lc2k"
            }
          },
          "end": "$"
        },
        {
          "name": "comment.block.lc2k",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.lc2k"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.lc2k"
            }
          }
        }
      ]
    }
  }
}